{"name":"vals","tagline":"","body":"# Synopsis\r\n\r\n**vals** is a utility library for extracting property values from an object with support for safe nested property lookup.\r\n\r\n[![browser support](https://ci.testling.com/pluma/vals.png)](https://ci.testling.com/pluma/vals)\r\n\r\n[![Build Status](https://travis-ci.org/pluma/vals.png?branch=master)](https://travis-ci.org/pluma/vals) [![NPM version](https://badge.fury.io/js/vals.png)](http://badge.fury.io/js/vals) [![Dependencies](https://david-dm.org/pluma/vals.png)](https://david-dm.org/pluma/vals)\r\n\r\n# Install\r\n\r\n## Node.js\r\n\r\n### With NPM\r\n\r\n```sh\r\nnpm install vals\r\n```\r\n\r\n### From source\r\n\r\n```sh\r\ngit clone https://github.com/pluma/vals.git\r\ncd vals\r\nnpm install\r\nmake\r\n```\r\n\r\n## Browser\r\n\r\n### With component\r\n\r\n```sh\r\ncomponent install pluma/vals\r\n```\r\n\r\n[Learn more about component](https://github.com/component/component).\r\n\r\n### With bower\r\n\r\n```sh\r\nbower install vals\r\n```\r\n\r\n[Learn more about bower](https://github.com/twitter/bower).\r\n\r\n### With a CommonJS module loader\r\n\r\nDownload the [latest minified CommonJS release](https://raw.github.com/pluma/vals/master/dist/vals.min.js) and add it to your project.\r\n\r\n[Learn more about CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1).\r\n\r\n### With an AMD module loader\r\n\r\nDownload the [latest minified AMD release](https://raw.github.com/pluma/vals/master/dist/vals.amd.min.js) and add it to your project.\r\n\r\n[Learn more about AMD modules](http://requirejs.org/docs/whyamd.html).\r\n\r\n### As a standalone library\r\n\r\nDownload the [latest minified standalone release](https://raw.github.com/pluma/vals/master/dist/vals.globals.min.js) and add it to your project.\r\n\r\n```html\r\n<script src=\"/your/js/path/vals.globals.min.js\"></script>\r\n```\r\n\r\nThis makes the `vals` module available in the global namespace.\r\n\r\n# Basic usage example\r\n\r\n```javascript\r\nvar vals = require('vals');\r\n\r\nvar obj1 = {a: 'one', b: 'two', c: 'three'};\r\nvals(obj1, 'a', 'b'); // ['one', 'two']\r\n\r\nvar obj2 = {foo: {bar: {qux: 'one', baz: 'two'}}};\r\nvals(obj2, ['foo', 'bar', 'qux']); // ['one']\r\nvals.one(obj2, ['foo', 'bar', 'qux']); // 'one'\r\nvals(obj2, ['fail', 'bar', 'qux']); // [undefined]\r\n\r\nvar obj3 = undefined;\r\nvals(obj3, 'foo', ['bar', 'qux']); // [undefined, undefined]\r\nvals.one(obj3, 'foo'); // undefined\r\n```\r\n\r\n# API\r\n\r\n## vals(obj, pathsâ€¦):Array\r\n\r\nExtracts the property values at each given property path as an array.\r\n\r\n## vals.one(obj, path):*\r\n\r\nAttempts to extract the property value at the given property path.\r\n\r\nIf `path` is an array, it will attempt to resolve the property path recursively.\r\n\r\nIf the path can not be resolved fully, the return value will be `undefined`.\r\n\r\n# License\r\n\r\nThe MIT/Expat license.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}